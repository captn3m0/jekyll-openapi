{
  "openapi": "3.0.2",
  "info": {
    "version": "1.0",
    "title": "Q-CTRL API",
    "description": "The Q-CTRL API provides a REST interface to access advanced quantum controls",
    "termsOfService": "https://help.q-ctrl.com/policies/boulder-opal-terms-of-service",
    "contact": {
      "name": "Q-CTRL Support",
      "email": "support@q-ctrl.com",
      "url": "https://q-ctrl.com/"
    }
  },
  "paths": {
    "/actions": {
      "get": {
        "operationId": "listActions",
        "parameters": [
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, errors, id, job_id, name, parent_action, received_at, related_model, runtime, status, started_at, subactions, terminated_at, type, updated_at, user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, job_id, status, content_type, subactions",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: subactions, user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved list of actions",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/actions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createAction",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: subactions, user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/actions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created actions resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/actions"
                }
              }
            }
          }
        }
      }
    },
    "/actions/{id}": {
      "get": {
        "operationId": "retrieveAction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this action.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, errors, id, job_id, name, parent_action, received_at, related_model, runtime, status, started_at, subactions, terminated_at, type, updated_at, user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, job_id, status, content_type, subactions",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: subactions, user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved actions resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/actions"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateAction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this action.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, errors, id, job_id, name, parent_action, received_at, related_model, runtime, status, started_at, subactions, terminated_at, type, updated_at, user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, job_id, status, content_type, subactions",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: subactions, user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/actions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated actions resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/actions"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "partial_updateAction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this action.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, errors, id, job_id, name, parent_action, received_at, related_model, runtime, status, started_at, subactions, terminated_at, type, updated_at, user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, job_id, status, content_type, subactions",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: subactions, user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/actions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated actions resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/actions"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "destroyAction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this action.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, errors, id, job_id, name, parent_action, received_at, related_model, runtime, status, started_at, subactions, terminated_at, type, updated_at, user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, job_id, status, content_type, subactions",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted actions resource"
          }
        }
      }
    },
    "/circuits": {
      "get": {
        "operationId": "listCircuits",
        "parameters": [
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, spaces, name, visualization, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, name, spaces",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: spaces",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved list of circuits",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/circuits"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createCircuit",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: spaces",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created circuits resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/circuits"
                }
              }
            }
          }
        }
      }
    },
    "/circuits/{id}": {
      "get": {
        "operationId": "retrieveCircuit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this circuit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, spaces, name, visualization, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, name, spaces",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: spaces",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved circuits resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/circuits"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateCircuit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this circuit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, spaces, name, visualization, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, name, spaces",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: spaces",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated circuits resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/circuits"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "partial_updateCircuit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this circuit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, spaces, name, visualization, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, name, spaces",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: spaces",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated circuits resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/circuits"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "destroyCircuit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this circuit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, spaces, name, visualization, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, name, spaces",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted circuits resource"
          }
        }
      }
    },
    "/controls": {
      "get": {
        "operationId": "listControls",
        "parameters": [
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, pulse, noise, name, type, operator_encoded, created_at, updated_at, system",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, name, pulse, type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise, pulse, system",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved list of controls",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/controls"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createControl",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise, pulse, system",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/controls"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created controls resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/controls"
                }
              }
            }
          }
        }
      }
    },
    "/controls/{id}": {
      "get": {
        "operationId": "retrieveControl",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this control.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, pulse, noise, name, type, operator_encoded, created_at, updated_at, system",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, name, pulse, type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise, pulse, system",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved controls resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/controls"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateControl",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this control.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, pulse, noise, name, type, operator_encoded, created_at, updated_at, system",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, name, pulse, type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise, pulse, system",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/controls"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated controls resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/controls"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "partial_updateControl",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this control.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, pulse, noise, name, type, operator_encoded, created_at, updated_at, system",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, name, pulse, type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise, pulse, system",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/controls"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated controls resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/controls"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "destroyControl",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this control.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, pulse, noise, name, type, operator_encoded, created_at, updated_at, system",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, name, pulse, type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted controls resource"
          }
        }
      }
    },
    "/filter_functions": {
      "get": {
        "operationId": "listFilterFunctions",
        "parameters": [
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, noise, sample_count, interpolated_frequencies, interpolated_points, sampled_points, infidelity, infidelity_precision, error, error_precision, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, noise, sample_count, infidelity, infidelity_precision, error, error_precision",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved list of filter_functions",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/filter_functions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createFilterFunction",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/filter_functions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created filter_functions resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/filter_functions"
                }
              }
            }
          }
        }
      }
    },
    "/filter_functions/{id}": {
      "get": {
        "operationId": "retrieveFilterFunction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this filter function.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, noise, sample_count, interpolated_frequencies, interpolated_points, sampled_points, infidelity, infidelity_precision, error, error_precision, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, noise, sample_count, infidelity, infidelity_precision, error, error_precision",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved filter_functions resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/filter_functions"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateFilterFunction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this filter function.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, noise, sample_count, interpolated_frequencies, interpolated_points, sampled_points, infidelity, infidelity_precision, error, error_precision, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, noise, sample_count, infidelity, infidelity_precision, error, error_precision",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/filter_functions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated filter_functions resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/filter_functions"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "partial_updateFilterFunction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this filter function.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, noise, sample_count, interpolated_frequencies, interpolated_points, sampled_points, infidelity, infidelity_precision, error, error_precision, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, noise, sample_count, infidelity, infidelity_precision, error, error_precision",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/filter_functions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated filter_functions resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/filter_functions"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "destroyFilterFunction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this filter function.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, noise, sample_count, interpolated_frequencies, interpolated_points, sampled_points, infidelity, infidelity_precision, error, error_precision, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, noise, sample_count, infidelity, infidelity_precision, error, error_precision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted filter_functions resource"
          }
        }
      }
    },
    "/linear_filters": {
      "get": {
        "operationId": "listLinearFilters",
        "parameters": [
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, pulse, type, cutoff_frequency, created_at, updated_at, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, cutoff_frequency, pulse, type, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: pulse, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved list of linear_filters",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/linear_filters"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createLinearFilter",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: pulse, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/linear_filters"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created linear_filters resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/linear_filters"
                }
              }
            }
          }
        }
      }
    },
    "/linear_filters/{id}": {
      "get": {
        "operationId": "retrieveLinearFilter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this linear filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, pulse, type, cutoff_frequency, created_at, updated_at, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, cutoff_frequency, pulse, type, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: pulse, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved linear_filters resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/linear_filters"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateLinearFilter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this linear filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, pulse, type, cutoff_frequency, created_at, updated_at, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, cutoff_frequency, pulse, type, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: pulse, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/linear_filters"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated linear_filters resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/linear_filters"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "partial_updateLinearFilter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this linear filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, pulse, type, cutoff_frequency, created_at, updated_at, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, cutoff_frequency, pulse, type, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: pulse, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/linear_filters"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated linear_filters resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/linear_filters"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "destroyLinearFilter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this linear filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, pulse, type, cutoff_frequency, created_at, updated_at, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, cutoff_frequency, pulse, type, unfiltered_pulse",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted linear_filters resource"
          }
        }
      }
    },
    "/noises": {
      "get": {
        "operationId": "listNoises",
        "parameters": [
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, error, error_precision, id, infidelity, infidelity_precision, name, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, control, name, system, type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: filter_functions, noise_spectral_density, system",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved list of noises",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/noises"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createNoise",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: filter_functions, noise_spectral_density, system",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/noises"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created noises resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/noises"
                }
              }
            }
          }
        }
      }
    },
    "/noises/{id}": {
      "get": {
        "operationId": "retrieveNoise",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, error, error_precision, id, infidelity, infidelity_precision, name, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, control, name, system, type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: filter_functions, noise_spectral_density, system",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved noises resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/noises"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "partial_updateNoise",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, error, error_precision, id, infidelity, infidelity_precision, name, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, control, name, system, type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: filter_functions, noise_spectral_density, system",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/noises"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated noises resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/noises"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "destroyNoise",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, error, error_precision, id, infidelity, infidelity_precision, name, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id, control, name, system, type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted noises resource"
          }
        }
      }
    },
    "/noise_spectral_densities": {
      "get": {
        "operationId": "listNoiseSpectralDensitys",
        "parameters": [
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, id, sampled_points, noise, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: created_at, id, noise, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved list of noise_spectral_densities",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/noise_spectral_densities"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createNoiseSpectralDensity",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/noise_spectral_densities"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created noise_spectral_densities resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/noise_spectral_densities"
                }
              }
            }
          }
        }
      }
    },
    "/noise_spectral_densities/{id}": {
      "get": {
        "operationId": "retrieveNoiseSpectralDensity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise spectral density.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, id, sampled_points, noise, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: created_at, id, noise, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved noise_spectral_densities resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/noise_spectral_densities"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "partial_updateNoiseSpectralDensity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise spectral density.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, id, sampled_points, noise, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: created_at, id, noise, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: noise",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/noise_spectral_densities"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated noise_spectral_densities resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/noise_spectral_densities"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "destroyNoiseSpectralDensity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise spectral density.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: created_at, id, sampled_points, noise, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: created_at, id, noise, type, updated_at",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted noise_spectral_densities resource"
          }
        }
      }
    },
    "/pulses": {
      "get": {
        "operationId": "listPulses",
        "parameters": [
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, created_at, duration, segment_count, segment_type, segments_encoded, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: control, duration, fixed_modulus, id, segment_type, type, upper_bound",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: control, linear_filter, source_linear_filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved list of pulses",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/pulses"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createPulse",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: control, linear_filter, source_linear_filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/pulses"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created pulses resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/pulses"
                }
              }
            }
          }
        }
      }
    },
    "/pulses/{id}": {
      "get": {
        "operationId": "retrievePulse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this pulse.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, created_at, duration, segment_count, segment_type, segments_encoded, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: control, duration, fixed_modulus, id, segment_type, type, upper_bound",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: control, linear_filter, source_linear_filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved pulses resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/pulses"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updatePulse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this pulse.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, created_at, duration, segment_count, segment_type, segments_encoded, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: control, duration, fixed_modulus, id, segment_type, type, upper_bound",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: control, linear_filter, source_linear_filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/pulses"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated pulses resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/pulses"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "partial_updatePulse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this pulse.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, created_at, duration, segment_count, segment_type, segments_encoded, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: control, duration, fixed_modulus, id, segment_type, type, upper_bound",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: control, linear_filter, source_linear_filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/pulses"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated pulses resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/pulses"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "destroyPulse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this pulse.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, created_at, duration, segment_count, segment_type, segments_encoded, type, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: control, duration, fixed_modulus, id, segment_type, type, upper_bound",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted pulses resource"
          }
        }
      }
    },
    "/systems": {
      "get": {
        "operationId": "listSystems",
        "parameters": [
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, name, actions, noises, target, controls, cost, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: controls, cost, id, name, noises",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: actions, controls, noises, target",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved list of systems",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/systems"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createSystem",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: actions, controls, noises, target",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/systems"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created systems resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/systems"
                }
              }
            }
          }
        }
      }
    },
    "/systems/{id}": {
      "get": {
        "operationId": "retrieveSystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this system.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, name, actions, noises, target, controls, cost, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: controls, cost, id, name, noises",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: actions, controls, noises, target",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved systems resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/systems"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateSystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this system.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, name, actions, noises, target, controls, cost, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: controls, cost, id, name, noises",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: actions, controls, noises, target",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/systems"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated systems resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/systems"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "partial_updateSystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this system.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, name, actions, noises, target, controls, cost, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: controls, cost, id, name, noises",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "List of related resources to include in the response. Available fields: actions, controls, noises, target",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/systems"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated systems resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/systems"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "destroySystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this system.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, name, actions, noises, target, controls, cost, created_at, updated_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: controls, cost, id, name, noises",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted systems resource"
          }
        }
      }
    },
    "/targets": {
      "get": {
        "operationId": "listTargets",
        "parameters": [
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, projection_operator_encoded, unitary_operator_encoded, created_at, updated_at, system",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved list of targets",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/targets"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createTarget",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/targets"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created targets resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/targets"
                }
              }
            }
          }
        }
      }
    },
    "/targets/{id}": {
      "get": {
        "operationId": "retrieveTarget",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this target.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, projection_operator_encoded, unitary_operator_encoded, created_at, updated_at, system",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved targets resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/targets"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateTarget",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this target.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, projection_operator_encoded, unitary_operator_encoded, created_at, updated_at, system",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/targets"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated targets resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/targets"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "partial_updateTarget",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this target.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, projection_operator_encoded, unitary_operator_encoded, created_at, updated_at, system",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/targets"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated targets resource",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/targets"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "destroyTarget",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this target.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: id, projection_operator_encoded, unitary_operator_encoded, created_at, updated_at, system",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[search]",
            "required": false,
            "in": "query",
            "description": "A search term. Available fields: id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted targets resource"
          }
        }
      }
    },
    "/actions/{id}/relationships/(P{related_field}\\w+)": {
      "get": {
        "operationId": "RetrieveAction",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this action.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful GET request"
          }
        }
      },
      "post": {
        "operationId": "CreateAction",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this action.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful POST request"
          }
        }
      },
      "patch": {
        "operationId": "PartialUpdateAction",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this action.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful PATCH request"
          }
        }
      },
      "delete": {
        "operationId": "DestroyAction",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this action.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful DELETE request"
          }
        }
      }
    },
    "/circuits/{id}/relationships/(P{related_field}\\w+)": {
      "get": {
        "operationId": "RetrieveCircuit",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this circuit.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful GET request"
          }
        }
      },
      "post": {
        "operationId": "CreateCircuit",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this circuit.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful POST request"
          }
        }
      },
      "patch": {
        "operationId": "PartialUpdateCircuit",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this circuit.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful PATCH request"
          }
        }
      },
      "delete": {
        "operationId": "DestroyCircuit",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this circuit.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful DELETE request"
          }
        }
      }
    },
    "/controls/{id}/relationships/(P{related_field}\\w+)": {
      "get": {
        "operationId": "RetrieveControl",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this control.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful GET request"
          }
        }
      },
      "post": {
        "operationId": "CreateControl",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this control.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful POST request"
          }
        }
      },
      "patch": {
        "operationId": "PartialUpdateControl",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this control.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful PATCH request"
          }
        }
      },
      "delete": {
        "operationId": "DestroyControl",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this control.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful DELETE request"
          }
        }
      }
    },
    "/filter_functions/{id}/relationships/(P{related_field}\\w+)": {
      "get": {
        "operationId": "RetrieveFilterFunction",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this filter function.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful GET request"
          }
        }
      },
      "post": {
        "operationId": "CreateFilterFunction",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this filter function.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful POST request"
          }
        }
      },
      "patch": {
        "operationId": "PartialUpdateFilterFunction",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this filter function.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful PATCH request"
          }
        }
      },
      "delete": {
        "operationId": "DestroyFilterFunction",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this filter function.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful DELETE request"
          }
        }
      }
    },
    "/linear_filters/{id}/relationships/(P{related_field}\\w+)": {
      "get": {
        "operationId": "RetrieveLinearFilter",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this linear filter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful GET request"
          }
        }
      },
      "post": {
        "operationId": "CreateLinearFilter",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this linear filter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful POST request"
          }
        }
      },
      "patch": {
        "operationId": "PartialUpdateLinearFilter",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this linear filter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful PATCH request"
          }
        }
      },
      "delete": {
        "operationId": "DestroyLinearFilter",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this linear filter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful DELETE request"
          }
        }
      }
    },
    "/noises/{id}/relationships/(P{related_field}\\w+)": {
      "get": {
        "operationId": "RetrieveNoise",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful GET request"
          }
        }
      },
      "post": {
        "operationId": "CreateNoise",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful POST request"
          }
        }
      },
      "patch": {
        "operationId": "PartialUpdateNoise",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful PATCH request"
          }
        }
      },
      "delete": {
        "operationId": "DestroyNoise",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful DELETE request"
          }
        }
      }
    },
    "/noise_spectral_densities/{id}/relationships/(P{related_field}\\w+)": {
      "get": {
        "operationId": "RetrieveNoiseSpectralDensity",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise spectral density.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful GET request"
          }
        }
      },
      "post": {
        "operationId": "CreateNoiseSpectralDensity",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise spectral density.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful POST request"
          }
        }
      },
      "patch": {
        "operationId": "PartialUpdateNoiseSpectralDensity",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise spectral density.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful PATCH request"
          }
        }
      },
      "delete": {
        "operationId": "DestroyNoiseSpectralDensity",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this noise spectral density.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful DELETE request"
          }
        }
      }
    },
    "/points/{id}/relationships/(P{related_field}\\w+)": {
      "get": {
        "operationId": "RetrievePoint",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this point.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful GET request"
          }
        }
      },
      "post": {
        "operationId": "CreatePoint",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this point.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful POST request"
          }
        }
      },
      "patch": {
        "operationId": "PartialUpdatePoint",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this point.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful PATCH request"
          }
        }
      },
      "delete": {
        "operationId": "DestroyPoint",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this point.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful DELETE request"
          }
        }
      }
    },
    "/pulses/{id}/relationships/(P{related_field}\\w+)": {
      "get": {
        "operationId": "RetrievePulse",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this pulse.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful GET request"
          }
        }
      },
      "post": {
        "operationId": "CreatePulse",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this pulse.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful POST request"
          }
        }
      },
      "patch": {
        "operationId": "PartialUpdatePulse",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this pulse.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful PATCH request"
          }
        }
      },
      "delete": {
        "operationId": "DestroyPulse",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this pulse.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful DELETE request"
          }
        }
      }
    },
    "/spaces/{id}/relationships/(P{related_field}\\w+)": {
      "get": {
        "operationId": "RetrieveSpace",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this space.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful GET request"
          }
        }
      },
      "post": {
        "operationId": "CreateSpace",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this space.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful POST request"
          }
        }
      },
      "patch": {
        "operationId": "PartialUpdateSpace",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this space.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful PATCH request"
          }
        }
      },
      "delete": {
        "operationId": "DestroySpace",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this space.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful DELETE request"
          }
        }
      }
    },
    "/systems/{id}/relationships/(P{related_field}\\w+)": {
      "get": {
        "operationId": "RetrieveSystem",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this system.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful GET request"
          }
        }
      },
      "post": {
        "operationId": "CreateSystem",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this system.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful POST request"
          }
        }
      },
      "patch": {
        "operationId": "PartialUpdateSystem",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this system.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful PATCH request"
          }
        }
      },
      "delete": {
        "operationId": "DestroySystem",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this system.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful DELETE request"
          }
        }
      }
    },
    "/targets/{id}/relationships/(P{related_field}\\w+)": {
      "get": {
        "operationId": "RetrieveTarget",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this target.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful GET request"
          }
        }
      },
      "post": {
        "operationId": "CreateTarget",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this target.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful POST request"
          }
        }
      },
      "patch": {
        "operationId": "PartialUpdateTarget",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this target.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/circuits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful PATCH request"
          }
        }
      },
      "delete": {
        "operationId": "DestroyTarget",
        "parameters": [
          {
            "name": "related_field",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this target.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful DELETE request"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api-dev.q-ctrl.com",
      "description": "Development"
    }
  ],
  "components": {
    "schemas": {
      "actions": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "actions"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "errors": {
                "type": "object",
                "nullable": true,
                "description": "Stack trace of the job that failed, if any",
                "x-validation-message": {
                  "type": "Value must be valid JSON."
                }
              },
              "job_id": {
                "type": "string",
                "nullable": true,
                "description": "Internal identifier for asynchronous task",
                "maxLength": 36,
                "x-validation-message": {
                  "maxLength": "Ensure this field has no more than 36 characters.",
                  "type": "Not a valid string."
                },
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 50,
                "x-validation-message": {
                  "maxLength": "Ensure this field has no more than 50 characters.",
                  "type": "Not a valid string."
                }
              },
              "received_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "description": "Marks the time when the task gets received from the worker.",
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "runtime": {
                "type": "number",
                "readOnly": true,
                "nullable": true,
                "description": "The duration of the task's execution(in seconds).",
                "x-validation-message": {
                  "type": "A valid number is required."
                }
              },
              "status": {
                "enum": [
                  "FAILURE",
                  "PENDING",
                  "RECEIVED",
                  "RETRY",
                  "REVOKED",
                  "STARTED",
                  "SUCCESS"
                ],
                "description": "The status of the job",
                "x-validation-message": {
                  "enum": "\"{input}\" is not a valid choice."
                }
              },
              "started_at": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Marks the time when the task started executing.",
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "terminated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "description": "Marks the time when the task finished executing (succeeded/failed/revoked).",
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "type": {
                "enum": [
                  "robust_optimize",
                  "optimal_optimize",
                  "t1_decay_assessment",
                  "filter_function_evaluation",
                  "piecewise_power_law_noise_spectral_density_evaluation"
                ],
                "x-validation-message": {
                  "enum": "\"{input}\" is not a valid choice."
                }
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              }
            },
            "required": [
              "name",
              "type"
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "parent_action": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "actions"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              },
              "related_model": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              },
              "subactions": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "actions"
                          ]
                        },
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ]
                    }
                  }
                }
              },
              "user": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "users"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "circuits": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "circuits"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "maxLength": 50,
                "x-validation-message": {
                  "maxLength": "Ensure this field has no more than 50 characters.",
                  "type": "Not a valid string."
                }
              },
              "visualization": {
                "type": "object",
                "x-validation-message": {
                  "type": "Value must be valid JSON."
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              }
            },
            "required": [
              "name"
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "spaces": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "spaces"
                          ]
                        },
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "controls": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "controls"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "maxLength": 50,
                "x-validation-message": {
                  "maxLength": "Ensure this field has no more than 50 characters.",
                  "type": "Not a valid string."
                }
              },
              "type": {
                "enum": [
                  "shift",
                  "drive",
                  "drift"
                ],
                "x-validation-message": {
                  "enum": "\"{input}\" is not a valid choice."
                }
              },
              "operator_encoded": {
                "type": "object",
                "properties": {
                  "base64_encoded_array": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9/+]*={0,2}$",
                    "x-validation-message": {
                      "type": "The value of base64 encoded array must be a valid base64 string.",
                      "pattern": "The value of base64 encoded array must be a valid base64 string."
                    }
                  },
                  "dtype": {
                    "type": "string",
                    "enum": [
                      "bool",
                      "int8",
                      "uint8",
                      "int16",
                      "uint16",
                      "int32",
                      "uint32",
                      "int64",
                      "uint64",
                      "int128",
                      "uint128",
                      "float16",
                      "float32",
                      "float64",
                      "float80",
                      "float96",
                      "float128",
                      "float256",
                      "complex32",
                      "complex64",
                      "complex128",
                      "complex160",
                      "complex192",
                      "complex256",
                      "complex512",
                      "object"
                    ],
                    "x-validation-message": {
                      "type": "The dtype value must be a string",
                      "enum": "The dtype value must be a valid numeric type name, i.e., int32, float64, complex128, etc."
                    }
                  },
                  "shape": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "x-validation-message": {
                        "type": "The shape value must be an array of numbers"
                      }
                    },
                    "x-validation-message": {
                      "type": "The shape value must be an array of numbers"
                    }
                  }
                },
                "required": [
                  "base64_encoded_array",
                  "dtype",
                  "shape"
                ],
                "nullable": true,
                "x-validation-message": {
                  "type": "Value must be valid JSON."
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              }
            },
            "required": [
              "name",
              "type",
              "operator_encoded"
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "pulse": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "pulses"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              },
              "noise": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "noises"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              },
              "system": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "systems"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "filter_functions": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "filter_functions"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "sample_count": {
                "type": "integer",
                "maximum": 8192,
                "minimum": 2,
                "description": "The number of samples",
                "x-validation-message": {
                  "maximum": "The value has to be between 2 and 8192.",
                  "minimum": "The value has to be between 2 and 8192.",
                  "type": "A valid integer is required."
                }
              },
              "interpolated_frequencies": {
                "type": "array",
                "items": {
                  "type": "number",
                  "minimum": 1e-27,
                  "maximum": 1e+27,
                  "x-validation-message": {
                    "minimum": "The value has to be between 1e-27 and 1e+27.",
                    "maximum": "The value has to be between 1e-27 and 1e+27.",
                    "type": "A valid number is required."
                  }
                },
                "description": "The list of interpolated frequencies",
                "minItems": 2,
                "maxItems": 8192,
                "x-validation-message": {
                  "minItems": "The number of items has to be between 2 and 8192.",
                  "maxItems": "The number of items has to be between 2 and 8192.",
                  "type": "Expected a list of items but got type \"{input_type}\"."
                }
              },
              "interpolated_points": {
                "type": "array",
                "nullable": true,
                "minItems": 2,
                "maxItems": 8192,
                "items": {
                  "type": "object",
                  "properties": {
                    "frequency": {
                      "type": "number",
                      "x-validation-message": {
                        "type": "Must be a valid number."
                      }
                    },
                    "inverse_power": {
                      "type": "number",
                      "x-validation-message": {
                        "type": "Must be a valid number."
                      }
                    },
                    "inverse_power_precision": {
                      "type": "number",
                      "x-validation-message": {
                        "type": "Must be a valid number."
                      }
                    }
                  },
                  "required": [
                    "frequency",
                    "inverse_power",
                    "inverse_power_precision"
                  ]
                },
                "x-validation-message": {
                  "type": "Value must be valid JSON.",
                  "minItems": "The number of points has to be between 2 and 8192.",
                  "maxItems": "The number of points has to be between 2 and 8192."
                }
              },
              "sampled_points": {
                "type": "array",
                "nullable": true,
                "minItems": 2,
                "maxItems": 8192,
                "items": {
                  "type": "object",
                  "properties": {
                    "frequency": {
                      "type": "number",
                      "x-validation-message": {
                        "type": "Must be a valid number."
                      }
                    },
                    "inverse_power": {
                      "type": "number",
                      "x-validation-message": {
                        "type": "Must be a valid number."
                      }
                    },
                    "inverse_power_precision": {
                      "type": "number",
                      "x-validation-message": {
                        "type": "Must be a valid number."
                      }
                    }
                  },
                  "required": [
                    "frequency",
                    "inverse_power",
                    "inverse_power_precision"
                  ]
                },
                "x-validation-message": {
                  "type": "Value must be valid JSON.",
                  "minItems": "The number of points has to be between 2 and 8192.",
                  "maxItems": "The number of points has to be between 2 and 8192."
                }
              },
              "infidelity": {
                "type": "number",
                "nullable": true,
                "x-validation-message": {
                  "type": "A valid number is required."
                }
              },
              "infidelity_precision": {
                "type": "number",
                "nullable": true,
                "x-validation-message": {
                  "type": "A valid number is required."
                }
              },
              "error": {
                "type": "number",
                "nullable": true,
                "x-validation-message": {
                  "type": "A valid number is required."
                }
              },
              "error_precision": {
                "type": "number",
                "nullable": true,
                "x-validation-message": {
                  "type": "A valid number is required."
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              }
            },
            "required": [
              "sample_count"
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "noise": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "noises"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "linear_filters": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "linear_filters"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "rc"
                ],
                "x-validation-message": {
                  "enum": "\"{input}\" is not a valid choice."
                }
              },
              "cutoff_frequency": {
                "type": "number",
                "minimum": 1e-27,
                "maximum": 1e+27,
                "x-validation-message": {
                  "minimum": "The value has to be between 1e-27 and 1e+27.",
                  "maximum": "The value has to be between 1e-27 and 1e+27.",
                  "type": "A valid number is required."
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              }
            },
            "required": [
              "type",
              "cutoff_frequency"
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "pulse": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "pulses"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              },
              "unfiltered_pulse": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "pulses"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "noises": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "noises"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "error": {
                "type": "number",
                "nullable": true,
                "x-validation-message": {
                  "type": "A valid number is required."
                }
              },
              "error_precision": {
                "type": "number",
                "nullable": true,
                "x-validation-message": {
                  "type": "A valid number is required."
                }
              },
              "infidelity": {
                "type": "number",
                "nullable": true,
                "x-validation-message": {
                  "type": "A valid number is required."
                }
              },
              "infidelity_precision": {
                "type": "number",
                "nullable": true,
                "x-validation-message": {
                  "type": "A valid number is required."
                }
              },
              "name": {
                "type": "string",
                "maxLength": 50,
                "x-validation-message": {
                  "maxLength": "Ensure this field has no more than 50 characters.",
                  "type": "Not a valid string."
                }
              },
              "type": {
                "enum": [
                  "additive",
                  "individual_qubit_loss",
                  "control"
                ],
                "x-validation-message": {
                  "enum": "\"{input}\" is not a valid choice."
                }
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "operator_encoded": {
                "type": "object",
                "properties": {
                  "base64_encoded_array": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9/+]*={0,2}$",
                    "x-validation-message": {
                      "type": "The value of base64 encoded array must be a valid base64 string.",
                      "pattern": "The value of base64 encoded array must be a valid base64 string."
                    }
                  },
                  "dtype": {
                    "type": "string",
                    "enum": [
                      "bool",
                      "int8",
                      "uint8",
                      "int16",
                      "uint16",
                      "int32",
                      "uint32",
                      "int64",
                      "uint64",
                      "int128",
                      "uint128",
                      "float16",
                      "float32",
                      "float64",
                      "float80",
                      "float96",
                      "float128",
                      "float256",
                      "complex32",
                      "complex64",
                      "complex128",
                      "complex160",
                      "complex192",
                      "complex256",
                      "complex512",
                      "object"
                    ],
                    "x-validation-message": {
                      "type": "The dtype value must be a string",
                      "enum": "The dtype value must be a valid numeric type name, i.e., int32, float64, complex128, etc."
                    }
                  },
                  "shape": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "x-validation-message": {
                        "type": "The shape value must be an array of numbers"
                      }
                    },
                    "x-validation-message": {
                      "type": "The shape value must be an array of numbers"
                    }
                  }
                },
                "required": [
                  "base64_encoded_array",
                  "dtype",
                  "shape"
                ],
                "nullable": true,
                "x-validation-message": {
                  "type": "Value must be valid JSON."
                }
              },
              "duration": {
                "type": "number",
                "x-validation-message": {
                  "type": "A valid number is required."
                }
              },
              "loss_rate": {
                "type": "number",
                "x-validation-message": {
                  "type": "A valid number is required."
                }
              }
            },
            "required": [
              "name",
              "type"
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "system": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "systems"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              },
              "filter_functions": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "filter_functions"
                          ]
                        },
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ]
                    }
                  }
                }
              },
              "noise_spectral_density": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "noise_spectral_densities"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              },
              "control": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "controls"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "noise_spectral_densities": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "noise_spectral_densities"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "sampled_points": {
                "type": "array",
                "nullable": true,
                "minItems": 2,
                "maxItems": 8192,
                "x-validation-message": {
                  "minItems": "The number of sampled points has to be between 2 and 8192.",
                  "maxItems": "The number of sampled points has to be between 2 and 8192.",
                  "type": "Value must be valid JSON."
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "frequency": {
                      "type": "number",
                      "minimum": 0.0,
                      "maximum": 1e+27,
                      "x-validation-message": {
                        "type": "Must be a valid number.",
                        "minimum": "The sampled points frequency value has to be between 0.0 and 1e+27.",
                        "maximum": "The sampled points frequency value has to be between 0.0 and 1e+27."
                      }
                    },
                    "power": {
                      "type": "number",
                      "minimum": 0.0,
                      "maximum": 1e+27,
                      "x-validation-message": {
                        "type": "Must be a valid number.",
                        "minimum": "The sampled points power value has to be between 0.0 and 1e+27.",
                        "maximum": "The sampled points power value has to be between 0.0 and 1e+27."
                      }
                    },
                    "power_uncertainty": {
                      "type": "number",
                      "minimum": 0.0,
                      "maximum": 1e+27,
                      "x-validation-message": {
                        "type": "Must be a valid number.",
                        "minimum": "The sampled points power uncertainty value has to be between 0.0 and 1e+27.",
                        "maximum": "The sampled points power uncertainty value has to be between 0.0 and 1e+27."
                      }
                    },
                    "weight": {
                      "type": "number",
                      "minimum": 0.0,
                      "maximum": 1.0,
                      "x-validation-message": {
                        "type": "Must be a valid number.",
                        "minimum": "The sampled points weight value has to be between 0.0 and 1.0.",
                        "maximum": "The sampled points weight value has to be between 0.0 and 1.0."
                      }
                    }
                  },
                  "required": [
                    "frequency",
                    "power",
                    "power_uncertainty",
                    "weight"
                  ]
                }
              },
              "type": {
                "enum": [
                  "piecewise_power_law",
                  "piecewise_linear"
                ],
                "x-validation-message": {
                  "enum": "\"{input}\" is not a valid choice."
                }
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "coefficients": {
                "type": "array",
                "items": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1e+27,
                  "x-validation-message": {
                    "minimum": "The coefficient value has to be between 0 and 1e+27.",
                    "maximum": "The coefficient value has to be between 0 and 1e+27.",
                    "type": "A valid number is required."
                  }
                },
                "description": "The list of coefficients",
                "x-validation-message": {
                  "type": "Expected a list of items but got type \"{input_type}\"."
                }
              },
              "frequencies": {
                "type": "array",
                "items": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1e+27,
                  "x-validation-message": {
                    "minimum": "The frequency value has to be between 0 and 1e+27.",
                    "maximum": "The frequency value has to be between 0 and 1e+27.",
                    "type": "A valid number is required."
                  }
                },
                "description": "The list of frequencies",
                "minItems": 2,
                "maxItems": 8192,
                "x-validation-message": {
                  "minItems": "The number of frequencies has to be between 2 and 8192.",
                  "maxItems": "The number of frequencies has to be between 2 and 8192.",
                  "type": "Expected a list of items but got type \"{input_type}\"."
                }
              },
              "exponents": {
                "type": "array",
                "items": {
                  "type": "number",
                  "minimum": -1e+27,
                  "maximum": 1e+27,
                  "x-validation-message": {
                    "minimum": "The exponent value has to be between -1e+27 and 1e+27.",
                    "maximum": "The exponent value has to be between -1e+27 and 1e+27.",
                    "type": "A valid number is required."
                  }
                },
                "description": "The list of exponents",
                "x-validation-message": {
                  "type": "Expected a list of items but got type \"{input_type}\"."
                }
              },
              "interpolated_frequencies": {
                "type": "array",
                "items": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1e+27,
                  "x-validation-message": {
                    "minimum": "The interpolated frequency value has to be between 0 and 1e+27.",
                    "maximum": "The interpolated frequency value has to be between 0 and 1e+27.",
                    "type": "A valid number is required."
                  }
                },
                "description": "The list of interpolated frequencies",
                "minItems": 2,
                "maxItems": 8192,
                "x-validation-message": {
                  "minItems": "The number of interpolated frequencies has to be between 2 and 8192.",
                  "maxItems": "The number of interpolated frequencies has to be between 2 and 8192.",
                  "type": "Expected a list of items but got type \"{input_type}\"."
                }
              },
              "interpolated_points": {
                "type": "array",
                "nullable": true,
                "minItems": 2,
                "maxItems": 8192,
                "x-validation-message": {
                  "minItems": "The number of interpolated points has to be between 2 and 8192.",
                  "maxItems": "The number of interpolated points has to be between 2 and 8192.",
                  "type": "Value must be valid JSON."
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "frequency": {
                      "type": "number",
                      "minimum": 0.0,
                      "maximum": 1e+27,
                      "x-validation-message": {
                        "type": "Must be a valid number.",
                        "minimum": "The interpolated points frequency value has to be between 0.0 and 1e+27.",
                        "maximum": "The interpolated points frequency value has to be between 0.0 and 1e+27."
                      }
                    },
                    "power": {
                      "type": "number",
                      "minimum": 0.0,
                      "maximum": 1e+27,
                      "x-validation-message": {
                        "type": "Must be a valid number.",
                        "minimum": "The interpolated points power value has to be between 0.0 and 1e+27.",
                        "maximum": "The interpolated points power value has to be between 0.0 and 1e+27."
                      }
                    },
                    "power_uncertainty": {
                      "type": "number",
                      "minimum": 0.0,
                      "maximum": 1e+27,
                      "x-validation-message": {
                        "type": "Must be a valid number.",
                        "minimum": "The interpolated points power uncertainty value has to be between 0.0 and 1e+27.",
                        "maximum": "The interpolated points power uncertainty value has to be between 0.0 and 1e+27."
                      }
                    },
                    "weight": {
                      "type": "number",
                      "minimum": 0.0,
                      "maximum": 1.0,
                      "x-validation-message": {
                        "type": "Must be a valid number.",
                        "minimum": "The interpolated points weight value has to be between 0.0 and 1.0.",
                        "maximum": "The interpolated points weight value has to be between 0.0 and 1.0."
                      }
                    }
                  },
                  "required": [
                    "frequency",
                    "power",
                    "power_uncertainty",
                    "weight"
                  ]
                }
              }
            },
            "required": [
              "type"
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "noise": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "noises"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "points": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "points"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "sequence": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "x-validation-message": {
                  "maximum": "Ensure this value is less than or equal to 2147483647.",
                  "minimum": "Ensure this value is greater than or equal to -2147483648.",
                  "type": "A valid integer is required."
                }
              },
              "is_controlled": {
                "type": "boolean",
                "x-validation-message": {
                  "type": "Must be a valid boolean."
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              }
            },
            "required": [
              "sequence"
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "space": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "spaces"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "pulses": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pulses"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "duration": {
                "type": "number",
                "nullable": true,
                "minimum": 1e-27,
                "maximum": 1e+27,
                "x-validation-message": {
                  "minimum": "The value has to be between 1e-27 and 1e+27.",
                  "maximum": "The value has to be between 1e-27 and 1e+27.",
                  "type": "A valid number is required."
                }
              },
              "segment_count": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": 1,
                "nullable": true,
                "description": "The number of segments that this pulse will produce.",
                "x-validation-message": {
                  "maximum": "Ensure this value is less than or equal to 2147483647.",
                  "minimum": "Ensure this value is greater than or equal to 1.",
                  "type": "A valid integer is required."
                }
              },
              "segment_type": {
                "enum": [
                  "real",
                  "complex"
                ],
                "x-validation-message": {
                  "enum": "\"{input}\" is not a valid choice."
                }
              },
              "segments_encoded": {
                "type": "array",
                "nullable": true,
                "minItems": 1,
                "maxItems": 256,
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "base64_encoded_data": {
                              "type": "string",
                              "pattern": "^[a-zA-Z0-9/+]*={0,2}$",
                              "x-validation-message": {
                                "type": "The value of base64 encoded data must be a valid base64 string.",
                                "pattern": "The value of base64 encoded data must be a valid base64 string."
                              }
                            },
                            "dtype": {
                              "type": "string",
                              "enum": [
                                "bool",
                                "int8",
                                "uint8",
                                "int16",
                                "uint16",
                                "int32",
                                "uint32",
                                "int64",
                                "uint64",
                                "int128",
                                "uint128",
                                "float16",
                                "float32",
                                "float64",
                                "float80",
                                "float96",
                                "float128",
                                "float256",
                                "complex32",
                                "complex64",
                                "complex128",
                                "complex160",
                                "complex192",
                                "complex256",
                                "complex512",
                                "object"
                              ],
                              "x-validation-message": {
                                "type": "The dtype value must be a string",
                                "enum": "The dtype value must be a valid numeric type name, i.e., int32, float64, complex128, etc."
                              }
                            },
                            "shape": {
                              "type": "array",
                              "items": {
                                "type": "number",
                                "x-validation-message": {
                                  "type": "The shape value must be an array of numbers"
                                }
                              },
                              "x-validation-message": {
                                "type": "The shape value must be an array of numbers"
                              }
                            }
                          },
                          "required": [
                            "base64_encoded_data",
                            "dtype",
                            "shape"
                          ]
                        }
                      ]
                    },
                    "duration": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "value",
                    "duration"
                  ]
                },
                "x-validation-message": {
                  "type": "Value must be valid JSON."
                }
              },
              "type": {
                "enum": [
                  "optimum",
                  "custom",
                  "smooth"
                ],
                "x-validation-message": {
                  "enum": "\"{input}\" is not a valid choice."
                }
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "fixed_modulus": {
                "type": "boolean",
                "nullable": true,
                "x-validation-message": {
                  "type": "Must be a valid boolean."
                }
              },
              "upper_bound": {
                "type": "number",
                "nullable": true,
                "minimum": 1e-27,
                "maximum": 1e+27,
                "x-validation-message": {
                  "minimum": "The value has to be between 1e-27 and 1e+27.",
                  "maximum": "The value has to be between 1e-27 and 1e+27.",
                  "type": "A valid number is required."
                }
              }
            },
            "required": [
              "segment_type",
              "type"
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "control": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "controls"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              },
              "linear_filter": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "linear_filters"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              },
              "source_linear_filter": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "linear_filters"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "spaces": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "spaces"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "maxLength": 50,
                "x-validation-message": {
                  "maxLength": "Ensure this field has no more than 50 characters.",
                  "type": "Not a valid string."
                }
              },
              "type": {
                "enum": [
                  "hilbert"
                ],
                "x-validation-message": {
                  "enum": "\"{input}\" is not a valid choice."
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              }
            },
            "required": [
              "name"
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "points": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "points"
                          ]
                        },
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ]
                    }
                  }
                }
              },
              "circuit": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "circuits"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "systems": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "systems"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "x-validation-message": {
                  "type": "Not a valid string."
                }
              },
              "cost": {
                "type": "number",
                "nullable": true,
                "x-validation-message": {
                  "type": "A valid number is required."
                },
                "readOnly": true
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              }
            },
            "required": [
              "name"
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "actions": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "actions"
                          ]
                        },
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ]
                    }
                  }
                }
              },
              "noises": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "noises"
                          ]
                        },
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ]
                    }
                  }
                }
              },
              "target": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "targets"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              },
              "controls": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "controls"
                          ]
                        },
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "targets": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "targets"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "projection_operator_encoded": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "base64_encoded_array": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9/+]*={0,2}$",
                    "x-validation-message": {
                      "type": "The value of base64 encoded array must be a valid base64 string.",
                      "pattern": "The value of base64 encoded array must be a valid base64 string."
                    }
                  },
                  "dtype": {
                    "type": "string",
                    "enum": [
                      "bool",
                      "int8",
                      "uint8",
                      "int16",
                      "uint16",
                      "int32",
                      "uint32",
                      "int64",
                      "uint64",
                      "int128",
                      "uint128",
                      "float16",
                      "float32",
                      "float64",
                      "float80",
                      "float96",
                      "float128",
                      "float256",
                      "complex32",
                      "complex64",
                      "complex128",
                      "complex160",
                      "complex192",
                      "complex256",
                      "complex512",
                      "object"
                    ],
                    "x-validation-message": {
                      "type": "The dtype value must be a string",
                      "enum": "The dtype value must be a valid numeric type name, i.e., int32, float64, complex128, etc."
                    }
                  },
                  "shape": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "x-validation-message": {
                        "type": "The shape value must be an array of numbers"
                      }
                    },
                    "x-validation-message": {
                      "type": "The shape value must be an array of numbers"
                    }
                  }
                },
                "required": [
                  "base64_encoded_array",
                  "dtype",
                  "shape"
                ],
                "x-validation-message": {
                  "type": "Value must be valid JSON."
                }
              },
              "unitary_operator_encoded": {
                "type": "object",
                "properties": {
                  "base64_encoded_array": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9/+]*={0,2}$",
                    "x-validation-message": {
                      "type": "The value of base64 encoded array must be a valid base64 string.",
                      "pattern": "The value of base64 encoded array must be a valid base64 string."
                    }
                  },
                  "dtype": {
                    "type": "string",
                    "enum": [
                      "bool",
                      "int8",
                      "uint8",
                      "int16",
                      "uint16",
                      "int32",
                      "uint32",
                      "int64",
                      "uint64",
                      "int128",
                      "uint128",
                      "float16",
                      "float32",
                      "float64",
                      "float80",
                      "float96",
                      "float128",
                      "float256",
                      "complex32",
                      "complex64",
                      "complex128",
                      "complex160",
                      "complex192",
                      "complex256",
                      "complex512",
                      "object"
                    ],
                    "x-validation-message": {
                      "type": "The dtype value must be a string",
                      "enum": "The dtype value must be a valid numeric type name, i.e., int32, float64, complex128, etc."
                    }
                  },
                  "shape": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "x-validation-message": {
                        "type": "The shape value must be an array of numbers"
                      }
                    },
                    "x-validation-message": {
                      "type": "The shape value must be an array of numbers"
                    }
                  }
                },
                "required": [
                  "base64_encoded_array",
                  "dtype",
                  "shape"
                ],
                "nullable": true,
                "x-validation-message": {
                  "type": "Value must be valid JSON."
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                }
              }
            },
            "required": [
              "unitary_operator_encoded"
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "system": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "systems"
                        ]
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "users": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "users"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "firebase_id": {
                "type": "string",
                "format": "uuid",
                "x-validation-message": {
                  "type": "Must be a valid UUID."
                },
                "readOnly": true
              },
              "academic_verified": {
                "type": "boolean",
                "x-validation-message": {
                  "type": "Must be a valid boolean."
                },
                "readOnly": true
              },
              "username": {
                "type": "string",
                "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                "pattern": "^[\\w.@+-]+$",
                "x-validation-message": {
                  "pattern": "Enter a valid username. This value may contain only letters, numbers, and @/./+/-/_ characters.",
                  "maxLength": "Ensure this field has no more than 150 characters.",
                  "type": "Not a valid string."
                },
                "maxLength": 150,
                "readOnly": true
              },
              "first_name": {
                "type": "string",
                "maxLength": 30,
                "x-validation-message": {
                  "maxLength": "Ensure this field has no more than 30 characters.",
                  "type": "Not a valid string."
                }
              },
              "last_name": {
                "type": "string",
                "maxLength": 150,
                "x-validation-message": {
                  "maxLength": "Ensure this field has no more than 150 characters.",
                  "type": "Not a valid string."
                }
              },
              "email": {
                "type": "string",
                "format": "email",
                "maxLength": 254,
                "x-validation-message": {
                  "maxLength": "Ensure this field has no more than 254 characters.",
                  "format": "Enter a valid email address.",
                  "type": "Enter a valid email address."
                },
                "readOnly": true
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "x-validation-message": {
                  "type": "Datetime has wrong format. Use one of these formats instead: date-time."
                },
                "readOnly": true
              }
            },
            "required": [
              "firebase_id",
              "academic_verified",
              "username",
              "created_at"
            ]
          }
        }
      }
    }
  }
}
